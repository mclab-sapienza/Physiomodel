/* Simulation code for Test generated by the OpenModelica Compiler v1.9.6. */
/* States */

/* StatesDerivatives */

/* Non Discrete Real Algebraic Vars */
/* diastole.EDV */
#define _$Pdiastole$PEDV(i) data->localData[i]->realVars[0]
#define $Pdiastole$PEDV _$Pdiastole$PEDV(0)
#define $P$PRE$Pdiastole$PEDV data->simulationInfo->realVarsPre[0]
#define $P$ATTRIBUTE$Pdiastole$PEDV data->modelData->realVarsData[0].attribute
#define $P$ATTRIBUTE$P$PRE$Pdiastole$PEDV $P$ATTRIBUTE$Pdiastole$PEDV
#define $Pdiastole$PEDV__varInfo data->modelData->realVarsData[0].info
#define $P$PRE$Pdiastole$PEDV__varInfo data->modelData->realVarsData[0].info
#define _$P$PRE$Pdiastole$PEDV(i) $P$PRE$Pdiastole$PEDV


/* diastole.externalPressure */
#define _$Pdiastole$PexternalPressure(i) data->localData[i]->realVars[1]
#define $Pdiastole$PexternalPressure _$Pdiastole$PexternalPressure(0)
#define $P$PRE$Pdiastole$PexternalPressure data->simulationInfo->realVarsPre[1]
#define $P$ATTRIBUTE$Pdiastole$PexternalPressure data->modelData->realVarsData[1].attribute
#define $P$ATTRIBUTE$P$PRE$Pdiastole$PexternalPressure $P$ATTRIBUTE$Pdiastole$PexternalPressure
#define $Pdiastole$PexternalPressure__varInfo data->modelData->realVarsData[1].info
#define $P$PRE$Pdiastole$PexternalPressure__varInfo data->modelData->realVarsData[1].info
#define _$P$PRE$Pdiastole$PexternalPressure(i) $P$PRE$Pdiastole$PexternalPressure


/* q_in.pressure */
#define _$Pq_in$Ppressure(i) data->localData[i]->realVars[2]
#define $Pq_in$Ppressure _$Pq_in$Ppressure(0)
#define $P$PRE$Pq_in$Ppressure data->simulationInfo->realVarsPre[2]
#define $P$ATTRIBUTE$Pq_in$Ppressure data->modelData->realVarsData[2].attribute
#define $P$ATTRIBUTE$P$PRE$Pq_in$Ppressure $P$ATTRIBUTE$Pq_in$Ppressure
#define $Pq_in$Ppressure__varInfo data->modelData->realVarsData[2].info
#define $P$PRE$Pq_in$Ppressure__varInfo data->modelData->realVarsData[2].info
#define _$P$PRE$Pq_in$Ppressure(i) $P$PRE$Pq_in$Ppressure


/* q_in.q */
#define _$Pq_in$Pq(i) data->localData[i]->realVars[3]
#define $Pq_in$Pq _$Pq_in$Pq(0)
#define $P$PRE$Pq_in$Pq data->simulationInfo->realVarsPre[3]
#define $P$ATTRIBUTE$Pq_in$Pq data->modelData->realVarsData[3].attribute
#define $P$ATTRIBUTE$P$PRE$Pq_in$Pq $P$ATTRIBUTE$Pq_in$Pq
#define $Pq_in$Pq__varInfo data->modelData->realVarsData[3].info
#define $P$PRE$Pq_in$Pq__varInfo data->modelData->realVarsData[3].info
#define _$P$PRE$Pq_in$Pq(i) $P$PRE$Pq_in$Pq


/* Discrete Real Algebraic Vars */

/* Nonlinear Constraints For Dyn. Optimization */

/* Nonlinear Final Constraints For Dyn. Optimization */

/* Algebraic Parameter */
/* NormalEndDiastolicVolume */
#define $PNormalEndDiastolicVolume data->simulationInfo->realParameter[0]
#define _$PNormalEndDiastolicVolume(i) $PNormalEndDiastolicVolume
#define $P$ATTRIBUTE$PNormalEndDiastolicVolume data->modelData->realParameterData[0].attribute
#define $P$ATTRIBUTE$P$PRE$PNormalEndDiastolicVolume $P$ATTRIBUTE$PNormalEndDiastolicVolume
#define $PNormalEndDiastolicVolume__varInfo data->modelData->realParameterData[0].info


/* NormalExternalPressure */
#define $PNormalExternalPressure data->simulationInfo->realParameter[1]
#define _$PNormalExternalPressure(i) $PNormalExternalPressure
#define $P$ATTRIBUTE$PNormalExternalPressure data->modelData->realParameterData[1].attribute
#define $P$ATTRIBUTE$P$PRE$PNormalExternalPressure $P$ATTRIBUTE$PNormalExternalPressure
#define $PNormalExternalPressure__varInfo data->modelData->realParameterData[1].info


/* NormalFillingPressure */
#define $PNormalFillingPressure data->simulationInfo->realParameter[2]
#define _$PNormalFillingPressure(i) $PNormalFillingPressure
#define $P$ATTRIBUTE$PNormalFillingPressure data->modelData->realParameterData[2].attribute
#define $P$ATTRIBUTE$P$PRE$PNormalFillingPressure $P$ATTRIBUTE$PNormalFillingPressure
#define $PNormalFillingPressure__varInfo data->modelData->realParameterData[2].info


/* diastole.NormalEndDiastolicVolume */
#define $Pdiastole$PNormalEndDiastolicVolume data->simulationInfo->realParameter[3]
#define _$Pdiastole$PNormalEndDiastolicVolume(i) $Pdiastole$PNormalEndDiastolicVolume
#define $P$ATTRIBUTE$Pdiastole$PNormalEndDiastolicVolume data->modelData->realParameterData[3].attribute
#define $P$ATTRIBUTE$P$PRE$Pdiastole$PNormalEndDiastolicVolume $P$ATTRIBUTE$Pdiastole$PNormalEndDiastolicVolume
#define $Pdiastole$PNormalEndDiastolicVolume__varInfo data->modelData->realParameterData[3].info


/* diastole.NormalExternalPressure */
#define $Pdiastole$PNormalExternalPressure data->simulationInfo->realParameter[4]
#define _$Pdiastole$PNormalExternalPressure(i) $Pdiastole$PNormalExternalPressure
#define $P$ATTRIBUTE$Pdiastole$PNormalExternalPressure data->modelData->realParameterData[4].attribute
#define $P$ATTRIBUTE$P$PRE$Pdiastole$PNormalExternalPressure $P$ATTRIBUTE$Pdiastole$PNormalExternalPressure
#define $Pdiastole$PNormalExternalPressure__varInfo data->modelData->realParameterData[4].info


/* diastole.NormalFillingPressure */
#define $Pdiastole$PNormalFillingPressure data->simulationInfo->realParameter[5]
#define _$Pdiastole$PNormalFillingPressure(i) $Pdiastole$PNormalFillingPressure
#define $P$ATTRIBUTE$Pdiastole$PNormalFillingPressure data->modelData->realParameterData[5].attribute
#define $P$ATTRIBUTE$P$PRE$Pdiastole$PNormalFillingPressure $P$ATTRIBUTE$Pdiastole$PNormalFillingPressure
#define $Pdiastole$PNormalFillingPressure__varInfo data->modelData->realParameterData[5].info


/* diastole.n_Diastole */
#define $Pdiastole$Pn_Diastole data->simulationInfo->realParameter[6]
#define _$Pdiastole$Pn_Diastole(i) $Pdiastole$Pn_Diastole
#define $P$ATTRIBUTE$Pdiastole$Pn_Diastole data->modelData->realParameterData[6].attribute
#define $P$ATTRIBUTE$P$PRE$Pdiastole$Pn_Diastole $P$ATTRIBUTE$Pdiastole$Pn_Diastole
#define $Pdiastole$Pn_Diastole__varInfo data->modelData->realParameterData[6].info


/* diastole.stiffnes */
#define $Pdiastole$Pstiffnes data->simulationInfo->realParameter[7]
#define _$Pdiastole$Pstiffnes(i) $Pdiastole$Pstiffnes
#define $P$ATTRIBUTE$Pdiastole$Pstiffnes data->modelData->realParameterData[7].attribute
#define $P$ATTRIBUTE$P$PRE$Pdiastole$Pstiffnes $P$ATTRIBUTE$Pdiastole$Pstiffnes
#define $Pdiastole$Pstiffnes__varInfo data->modelData->realParameterData[7].info


/* n_Diastole */
#define $Pn_Diastole data->simulationInfo->realParameter[8]
#define _$Pn_Diastole(i) $Pn_Diastole
#define $P$ATTRIBUTE$Pn_Diastole data->modelData->realParameterData[8].attribute
#define $P$ATTRIBUTE$P$PRE$Pn_Diastole $P$ATTRIBUTE$Pn_Diastole
#define $Pn_Diastole__varInfo data->modelData->realParameterData[8].info


/* step.height */
#define $Pstep$Pheight data->simulationInfo->realParameter[9]
#define _$Pstep$Pheight(i) $Pstep$Pheight
#define $P$ATTRIBUTE$Pstep$Pheight data->modelData->realParameterData[9].attribute
#define $P$ATTRIBUTE$P$PRE$Pstep$Pheight $P$ATTRIBUTE$Pstep$Pheight
#define $Pstep$Pheight__varInfo data->modelData->realParameterData[9].info


/* step.offset */
#define $Pstep$Poffset data->simulationInfo->realParameter[10]
#define _$Pstep$Poffset(i) $Pstep$Poffset
#define $P$ATTRIBUTE$Pstep$Poffset data->modelData->realParameterData[10].attribute
#define $P$ATTRIBUTE$P$PRE$Pstep$Poffset $P$ATTRIBUTE$Pstep$Poffset
#define $Pstep$Poffset__varInfo data->modelData->realParameterData[10].info


/* step.startTime */
#define $Pstep$PstartTime data->simulationInfo->realParameter[11]
#define _$Pstep$PstartTime(i) $Pstep$PstartTime
#define $P$ATTRIBUTE$Pstep$PstartTime data->modelData->realParameterData[11].attribute
#define $P$ATTRIBUTE$P$PRE$Pstep$PstartTime $P$ATTRIBUTE$Pstep$PstartTime
#define $Pstep$PstartTime__varInfo data->modelData->realParameterData[11].info


/* stiffnes */
#define $Pstiffnes data->simulationInfo->realParameter[12]
#define _$Pstiffnes(i) $Pstiffnes
#define $P$ATTRIBUTE$Pstiffnes data->modelData->realParameterData[12].attribute
#define $P$ATTRIBUTE$P$PRE$Pstiffnes $P$ATTRIBUTE$Pstiffnes
#define $Pstiffnes__varInfo data->modelData->realParameterData[12].info


/* External Objects */

/* Algebraic Integer Vars */

/* Algebraic Integer Parameter */

/* Algebraic Boolean Vars */

/* Algebraic Boolean Parameters */

/* Algebraic String Variables */

/* Algebraic String Parameter */

/* sample */


extern void Test_callExternalObjectConstructors(DATA *data, threadData_t *threadData);
extern void Test_callExternalObjectDestructors(DATA *_data, threadData_t *threadData);
extern void Test_initialNonLinearSystem(int nNonLinearSystems, NONLINEAR_SYSTEM_DATA *data);
extern void Test_initialLinearSystem(int nLinearSystems, LINEAR_SYSTEM_DATA *data);
extern void Test_initialMixedSystem(int nMixedSystems, MIXED_SYSTEM_DATA *data);
extern void Test_initializeStateSets(int nStateSets, STATE_SET_DATA* statesetData, DATA *data);
extern int Test_functionAlgebraics(DATA *data, threadData_t *threadData);
extern int Test_function_storeDelayed(DATA *data, threadData_t *threadData);
extern int Test_updateBoundVariableAttributes(DATA *data, threadData_t *threadData);
extern int Test_functionInitialEquations(DATA *data, threadData_t *threadData);
extern int Test_functionInitialEquations_lambda0(DATA *data, threadData_t *threadData);
extern int Test_functionRemovedInitialEquations(DATA *data, threadData_t *threadData);
extern int Test_updateBoundParameters(DATA *data, threadData_t *threadData);
extern int Test_checkForAsserts(DATA *data, threadData_t *threadData);
extern int Test_function_ZeroCrossingsEquations(DATA *data, threadData_t *threadData);
extern int Test_function_ZeroCrossings(DATA *data, threadData_t *threadData, double* gout);
extern int Test_function_updateRelations(DATA *data, threadData_t *threadData, int evalZeroCross);
extern int Test_checkForDiscreteChanges(DATA *data, threadData_t *threadData);
extern const char* Test_zeroCrossingDescription(int i, int **out_EquationIndexes);
extern const char* Test_relationDescription(int i);
extern void Test_function_initSample(DATA *data, threadData_t *threadData);
extern int Test_initialAnalyticJacobianG(void* data, threadData_t *threadData);
extern int Test_initialAnalyticJacobianA(void* data, threadData_t *threadData);
extern int Test_initialAnalyticJacobianB(void* data, threadData_t *threadData);
extern int Test_initialAnalyticJacobianC(void* data, threadData_t *threadData);
extern int Test_initialAnalyticJacobianD(void* data, threadData_t *threadData);
extern int Test_functionJacG_column(void* data, threadData_t *threadData);
extern int Test_functionJacA_column(void* data, threadData_t *threadData);
extern int Test_functionJacB_column(void* data, threadData_t *threadData);
extern int Test_functionJacC_column(void* data, threadData_t *threadData);
extern int Test_functionJacD_column(void* data, threadData_t *threadData);
extern const char* Test_linear_model_frame(void);
extern int Test_mayer(DATA* data, modelica_real** res, short *);
extern int Test_lagrange(DATA* data, modelica_real** res, short *, short *);
extern int Test_pickUpBoundsForInputsInOptimization(DATA* data, modelica_real* min, modelica_real* max, modelica_real*nominal, modelica_boolean *useNominal, char ** name, modelica_real * start, modelica_real * startTimeOpt);
extern int Test_setInputData(DATA *data, const modelica_boolean file);
extern int Test_getTimeGrid(DATA *data, modelica_integer * nsi, modelica_real**t);
extern void Test_function_initSynchronous(DATA * data, threadData_t *threadData);
extern void Test_function_updateSynchronous(DATA * data, threadData_t *threadData, long i);
extern int Test_function_equationsSynchronous(DATA * data, threadData_t *threadData, long i);
extern void Test_read_input_fmu(MODEL_DATA* modelData, SIMULATION_INFO* simulationData);
extern void Test_function_savePreSynchronous(DATA *data, threadData_t *threadData);
extern int Test_inputNames(DATA* data, char ** names);

