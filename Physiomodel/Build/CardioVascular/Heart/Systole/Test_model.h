/* Simulation code for Test generated by the OpenModelica Compiler v1.9.6. */
/* States */

/* StatesDerivatives */

/* Non Discrete Real Algebraic Vars */
/* contractility */
#define _$Pcontractility(i) data->localData[i]->realVars[0]
#define $Pcontractility _$Pcontractility(0)
#define $P$PRE$Pcontractility data->simulationInfo->realVarsPre[0]
#define $P$ATTRIBUTE$Pcontractility data->modelData->realVarsData[0].attribute
#define $P$ATTRIBUTE$P$PRE$Pcontractility $P$ATTRIBUTE$Pcontractility
#define $Pcontractility__varInfo data->modelData->realVarsData[0].info
#define $P$PRE$Pcontractility__varInfo data->modelData->realVarsData[0].info
#define _$P$PRE$Pcontractility(i) $P$PRE$Pcontractility


/* outflow.q */
#define _$Poutflow$Pq(i) data->localData[i]->realVars[1]
#define $Poutflow$Pq _$Poutflow$Pq(0)
#define $P$PRE$Poutflow$Pq data->simulationInfo->realVarsPre[1]
#define $P$ATTRIBUTE$Poutflow$Pq data->modelData->realVarsData[1].attribute
#define $P$ATTRIBUTE$P$PRE$Poutflow$Pq $P$ATTRIBUTE$Poutflow$Pq
#define $Poutflow$Pq__varInfo data->modelData->realVarsData[1].info
#define $P$PRE$Poutflow$Pq__varInfo data->modelData->realVarsData[1].info
#define _$P$PRE$Poutflow$Pq(i) $P$PRE$Poutflow$Pq


/* step.y */
#define _$Pstep$Py(i) data->localData[i]->realVars[2]
#define $Pstep$Py _$Pstep$Py(0)
#define $P$PRE$Pstep$Py data->simulationInfo->realVarsPre[2]
#define $P$ATTRIBUTE$Pstep$Py data->modelData->realVarsData[2].attribute
#define $P$ATTRIBUTE$P$PRE$Pstep$Py $P$ATTRIBUTE$Pstep$Py
#define $Pstep$Py__varInfo data->modelData->realVarsData[2].info
#define $P$PRE$Pstep$Py__varInfo data->modelData->realVarsData[2].info
#define _$P$PRE$Pstep$Py(i) $P$PRE$Pstep$Py


/* systole.ESV */
#define _$Psystole$PESV(i) data->localData[i]->realVars[3]
#define $Psystole$PESV _$Psystole$PESV(0)
#define $P$PRE$Psystole$PESV data->simulationInfo->realVarsPre[3]
#define $P$ATTRIBUTE$Psystole$PESV data->modelData->realVarsData[3].attribute
#define $P$ATTRIBUTE$P$PRE$Psystole$PESV $P$ATTRIBUTE$Psystole$PESV
#define $Psystole$PESV__varInfo data->modelData->realVarsData[3].info
#define $P$PRE$Psystole$PESV__varInfo data->modelData->realVarsData[3].info
#define _$P$PRE$Psystole$PESV(i) $P$PRE$Psystole$PESV


/* systole.outflow.pressure */
#define _$Psystole$Poutflow$Ppressure(i) data->localData[i]->realVars[4]
#define $Psystole$Poutflow$Ppressure _$Psystole$Poutflow$Ppressure(0)
#define $P$PRE$Psystole$Poutflow$Ppressure data->simulationInfo->realVarsPre[4]
#define $P$ATTRIBUTE$Psystole$Poutflow$Ppressure data->modelData->realVarsData[4].attribute
#define $P$ATTRIBUTE$P$PRE$Psystole$Poutflow$Ppressure $P$ATTRIBUTE$Psystole$Poutflow$Ppressure
#define $Psystole$Poutflow$Ppressure__varInfo data->modelData->realVarsData[4].info
#define $P$PRE$Psystole$Poutflow$Ppressure__varInfo data->modelData->realVarsData[4].info
#define _$P$PRE$Psystole$Poutflow$Ppressure(i) $P$PRE$Psystole$Poutflow$Ppressure


/* Discrete Real Algebraic Vars */

/* Nonlinear Constraints For Dyn. Optimization */

/* Nonlinear Final Constraints For Dyn. Optimization */

/* Algebraic Parameter */
/* NormalEndSystolicVolume */
#define $PNormalEndSystolicVolume data->simulationInfo->realParameter[0]
#define _$PNormalEndSystolicVolume(i) $PNormalEndSystolicVolume
#define $P$ATTRIBUTE$PNormalEndSystolicVolume data->modelData->realParameterData[0].attribute
#define $P$ATTRIBUTE$P$PRE$PNormalEndSystolicVolume $P$ATTRIBUTE$PNormalEndSystolicVolume
#define $PNormalEndSystolicVolume__varInfo data->modelData->realParameterData[0].info


/* NormalExternalPressure */
#define $PNormalExternalPressure data->simulationInfo->realParameter[1]
#define _$PNormalExternalPressure(i) $PNormalExternalPressure
#define $P$ATTRIBUTE$PNormalExternalPressure data->modelData->realParameterData[1].attribute
#define $P$ATTRIBUTE$P$PRE$PNormalExternalPressure $P$ATTRIBUTE$PNormalExternalPressure
#define $PNormalExternalPressure__varInfo data->modelData->realParameterData[1].info


/* NormalSystolicPressure */
#define $PNormalSystolicPressure data->simulationInfo->realParameter[2]
#define _$PNormalSystolicPressure(i) $PNormalSystolicPressure
#define $P$ATTRIBUTE$PNormalSystolicPressure data->modelData->realParameterData[2].attribute
#define $P$ATTRIBUTE$P$PRE$PNormalSystolicPressure $P$ATTRIBUTE$PNormalSystolicPressure
#define $PNormalSystolicPressure__varInfo data->modelData->realParameterData[2].info


/* additionalPressure_Systolic */
#define $PadditionalPressure_Systolic data->simulationInfo->realParameter[3]
#define _$PadditionalPressure_Systolic(i) $PadditionalPressure_Systolic
#define $P$ATTRIBUTE$PadditionalPressure_Systolic data->modelData->realParameterData[3].attribute
#define $P$ATTRIBUTE$P$PRE$PadditionalPressure_Systolic $P$ATTRIBUTE$PadditionalPressure_Systolic
#define $PadditionalPressure_Systolic__varInfo data->modelData->realParameterData[3].info


/* n_Systole */
#define $Pn_Systole data->simulationInfo->realParameter[4]
#define _$Pn_Systole(i) $Pn_Systole
#define $P$ATTRIBUTE$Pn_Systole data->modelData->realParameterData[4].attribute
#define $P$ATTRIBUTE$P$PRE$Pn_Systole $P$ATTRIBUTE$Pn_Systole
#define $Pn_Systole__varInfo data->modelData->realParameterData[4].info


/* step.height */
#define $Pstep$Pheight data->simulationInfo->realParameter[5]
#define _$Pstep$Pheight(i) $Pstep$Pheight
#define $P$ATTRIBUTE$Pstep$Pheight data->modelData->realParameterData[5].attribute
#define $P$ATTRIBUTE$P$PRE$Pstep$Pheight $P$ATTRIBUTE$Pstep$Pheight
#define $Pstep$Pheight__varInfo data->modelData->realParameterData[5].info


/* step.offset */
#define $Pstep$Poffset data->simulationInfo->realParameter[6]
#define _$Pstep$Poffset(i) $Pstep$Poffset
#define $P$ATTRIBUTE$Pstep$Poffset data->modelData->realParameterData[6].attribute
#define $P$ATTRIBUTE$P$PRE$Pstep$Poffset $P$ATTRIBUTE$Pstep$Poffset
#define $Pstep$Poffset__varInfo data->modelData->realParameterData[6].info


/* step.startTime */
#define $Pstep$PstartTime data->simulationInfo->realParameter[7]
#define _$Pstep$PstartTime(i) $Pstep$PstartTime
#define $P$ATTRIBUTE$Pstep$PstartTime data->modelData->realParameterData[7].attribute
#define $P$ATTRIBUTE$P$PRE$Pstep$PstartTime $P$ATTRIBUTE$Pstep$PstartTime
#define $Pstep$PstartTime__varInfo data->modelData->realParameterData[7].info


/* systole.NormalEndSystolicVolume */
#define $Psystole$PNormalEndSystolicVolume data->simulationInfo->realParameter[8]
#define _$Psystole$PNormalEndSystolicVolume(i) $Psystole$PNormalEndSystolicVolume
#define $P$ATTRIBUTE$Psystole$PNormalEndSystolicVolume data->modelData->realParameterData[8].attribute
#define $P$ATTRIBUTE$P$PRE$Psystole$PNormalEndSystolicVolume $P$ATTRIBUTE$Psystole$PNormalEndSystolicVolume
#define $Psystole$PNormalEndSystolicVolume__varInfo data->modelData->realParameterData[8].info


/* systole.NormalExternalPressure */
#define $Psystole$PNormalExternalPressure data->simulationInfo->realParameter[9]
#define _$Psystole$PNormalExternalPressure(i) $Psystole$PNormalExternalPressure
#define $P$ATTRIBUTE$Psystole$PNormalExternalPressure data->modelData->realParameterData[9].attribute
#define $P$ATTRIBUTE$P$PRE$Psystole$PNormalExternalPressure $P$ATTRIBUTE$Psystole$PNormalExternalPressure
#define $Psystole$PNormalExternalPressure__varInfo data->modelData->realParameterData[9].info


/* systole.NormalSystolicPressure */
#define $Psystole$PNormalSystolicPressure data->simulationInfo->realParameter[10]
#define _$Psystole$PNormalSystolicPressure(i) $Psystole$PNormalSystolicPressure
#define $P$ATTRIBUTE$Psystole$PNormalSystolicPressure data->modelData->realParameterData[10].attribute
#define $P$ATTRIBUTE$P$PRE$Psystole$PNormalSystolicPressure $P$ATTRIBUTE$Psystole$PNormalSystolicPressure
#define $Psystole$PNormalSystolicPressure__varInfo data->modelData->realParameterData[10].info


/* systole.additionalPressure_Systolic */
#define $Psystole$PadditionalPressure_Systolic data->simulationInfo->realParameter[11]
#define _$Psystole$PadditionalPressure_Systolic(i) $Psystole$PadditionalPressure_Systolic
#define $P$ATTRIBUTE$Psystole$PadditionalPressure_Systolic data->modelData->realParameterData[11].attribute
#define $P$ATTRIBUTE$P$PRE$Psystole$PadditionalPressure_Systolic $P$ATTRIBUTE$Psystole$PadditionalPressure_Systolic
#define $Psystole$PadditionalPressure_Systolic__varInfo data->modelData->realParameterData[11].info


/* systole.n_Systole */
#define $Psystole$Pn_Systole data->simulationInfo->realParameter[12]
#define _$Psystole$Pn_Systole(i) $Psystole$Pn_Systole
#define $P$ATTRIBUTE$Psystole$Pn_Systole data->modelData->realParameterData[12].attribute
#define $P$ATTRIBUTE$P$PRE$Psystole$Pn_Systole $P$ATTRIBUTE$Psystole$Pn_Systole
#define $Psystole$Pn_Systole__varInfo data->modelData->realParameterData[12].info


/* External Objects */

/* Algebraic Integer Vars */

/* Algebraic Integer Parameter */

/* Algebraic Boolean Vars */

/* Algebraic Boolean Parameters */

/* Algebraic String Variables */

/* Algebraic String Parameter */

/* sample */


extern void Test_callExternalObjectConstructors(DATA *data, threadData_t *threadData);
extern void Test_callExternalObjectDestructors(DATA *_data, threadData_t *threadData);
extern void Test_initialNonLinearSystem(int nNonLinearSystems, NONLINEAR_SYSTEM_DATA *data);
extern void Test_initialLinearSystem(int nLinearSystems, LINEAR_SYSTEM_DATA *data);
extern void Test_initialMixedSystem(int nMixedSystems, MIXED_SYSTEM_DATA *data);
extern void Test_initializeStateSets(int nStateSets, STATE_SET_DATA* statesetData, DATA *data);
extern int Test_functionAlgebraics(DATA *data, threadData_t *threadData);
extern int Test_function_storeDelayed(DATA *data, threadData_t *threadData);
extern int Test_updateBoundVariableAttributes(DATA *data, threadData_t *threadData);
extern int Test_functionInitialEquations(DATA *data, threadData_t *threadData);
extern int Test_functionInitialEquations_lambda0(DATA *data, threadData_t *threadData);
extern int Test_functionRemovedInitialEquations(DATA *data, threadData_t *threadData);
extern int Test_updateBoundParameters(DATA *data, threadData_t *threadData);
extern int Test_checkForAsserts(DATA *data, threadData_t *threadData);
extern int Test_function_ZeroCrossingsEquations(DATA *data, threadData_t *threadData);
extern int Test_function_ZeroCrossings(DATA *data, threadData_t *threadData, double* gout);
extern int Test_function_updateRelations(DATA *data, threadData_t *threadData, int evalZeroCross);
extern int Test_checkForDiscreteChanges(DATA *data, threadData_t *threadData);
extern const char* Test_zeroCrossingDescription(int i, int **out_EquationIndexes);
extern const char* Test_relationDescription(int i);
extern void Test_function_initSample(DATA *data, threadData_t *threadData);
extern int Test_initialAnalyticJacobianG(void* data, threadData_t *threadData);
extern int Test_initialAnalyticJacobianA(void* data, threadData_t *threadData);
extern int Test_initialAnalyticJacobianB(void* data, threadData_t *threadData);
extern int Test_initialAnalyticJacobianC(void* data, threadData_t *threadData);
extern int Test_initialAnalyticJacobianD(void* data, threadData_t *threadData);
extern int Test_functionJacG_column(void* data, threadData_t *threadData);
extern int Test_functionJacA_column(void* data, threadData_t *threadData);
extern int Test_functionJacB_column(void* data, threadData_t *threadData);
extern int Test_functionJacC_column(void* data, threadData_t *threadData);
extern int Test_functionJacD_column(void* data, threadData_t *threadData);
extern const char* Test_linear_model_frame(void);
extern int Test_mayer(DATA* data, modelica_real** res, short *);
extern int Test_lagrange(DATA* data, modelica_real** res, short *, short *);
extern int Test_pickUpBoundsForInputsInOptimization(DATA* data, modelica_real* min, modelica_real* max, modelica_real*nominal, modelica_boolean *useNominal, char ** name, modelica_real * start, modelica_real * startTimeOpt);
extern int Test_setInputData(DATA *data, const modelica_boolean file);
extern int Test_getTimeGrid(DATA *data, modelica_integer * nsi, modelica_real**t);
extern void Test_function_initSynchronous(DATA * data, threadData_t *threadData);
extern void Test_function_updateSynchronous(DATA * data, threadData_t *threadData, long i);
extern int Test_function_equationsSynchronous(DATA * data, threadData_t *threadData, long i);
extern void Test_read_input_fmu(MODEL_DATA* modelData, SIMULATION_INFO* simulationData);
extern void Test_function_savePreSynchronous(DATA *data, threadData_t *threadData);
extern int Test_inputNames(DATA* data, char ** names);

